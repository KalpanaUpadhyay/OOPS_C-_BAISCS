 When a pointer is incremented/decremented, it actually increments/decrements by the number equal to the size of the data type for which it is a pointer. 
 
 For Example:
If an integer pointer that stores address 1000 is incremented, then it will increment by 4(size of an int), and the new address will point to 1004. While if a float type pointer is incremented then it will increment by 4(size of a float) and the new address will be 1004.

The addition/subtraction of two pointers is possible only when they have the same data type. The result is generated by calculating the difference between the addresses of the two pointers and calculating how many bytes of data it is according to the pointer data type. The addition/subtraction of two pointers gives the increments between the two pointers. 

 For Example:
Consider the same example as above where the ptr is an integer pointer that stores 1000 as an address. If we subtract integer 5 from it using the expression, ptr = ptr – 5, then, the final address stored in the ptr will be ptr = 1000 – sizeof(int) * 5 = 980.

We can compare the two pointers by using the comparison operators in C. We can implement this by using all operators in C >, >=, <, <=, ==, !=.  It returns true for the valid condition and returns false for the unsatisfied condition. 

    Step 1: Initialize the integer values and point these integer values to the pointer.
    Step 2: Now, check the condition by using comparison or relational operators on pointer variables.
    Step 3: Display the output.
    
 Pointers contain addresses. Adding two addresses makes no sense because there is no idea what it would point to. Subtracting two addresses lets you compute the offset between the two addresses. An array name acts like a pointer constant. The value of this pointer constant is the address of the first element.
 For Example: if an array is named arr then arr and &arr[0] can be used to reference the array as a pointer.
 
