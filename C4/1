ðŸ§  Day 4: Polymorphism in C++
ðŸ”¹ What is Polymorphism?
Polymorphism means "many forms". In C++, it allows you to call the same function on different objects and get different behaviors.

âœ… Types of Polymorphism in C++

Type	How it's achieved	When it's resolved
Compile-time (Static)	Function overloading, Operator overloading	At compile time
Runtime (Dynamic)	Virtual functions	At runtime

ðŸ“˜ 1. Compile-Time Polymorphism (Function Overloading)
#include <iostream>
using namespace std;

class Print {
public:
    void show(int x) {
        cout << "Integer: " << x << endl;
    }
    void show(double y) {
        cout << "Double: " << y << endl;
    }
};

int main() {
    Print obj;
    obj.show(10);
    obj.show(3.14);
}
ðŸ§¾ Output:

Integer: 10
Double: 3.14

ðŸ“˜ 2. Runtime Polymorphism (Virtual Functions)
#include <iostream>
using namespace std;

class Animal {
public:
    virtual void speak() {
        cout << "Animal speaks" << endl;
    }
};

class Dog : public Animal {
public:
    void speak() override {
        cout << "Dog barks" << endl;
    }
};

int main() {
    Animal* a;
    Dog d;
    a = &d;
    a->speak();  // Runtime decision
}

ðŸ§¾ Output:

Dog barks
âœ… Because speak() is a virtual function, C++ chooses the Dog version at runtime.

ðŸ’¡ Virtual Keyword Summary
Use virtual in base class to allow runtime overriding.

Without virtual, base class methods are called even if pointer is of derived type.

Use override in derived class for clarity.
