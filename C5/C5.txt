A pure virtual function is a virtual function with no definition in the base class. It is declared like this:

virtual void functionName() = 0;
It forces derived classes to provide their own implementation.

🔸 What is an Abstract Class?
A class that contains at least one pure virtual function is called an abstract class.

📌 Important:

You cannot create objects of an abstract class.

They are used as base classes in inheritance.

✅ Example: Abstract Class with Pure Virtual Function
#include <iostream>
using namespace std;

class Shape {
public:
    // Pure virtual function
    virtual void area() = 0;

    // Normal function (optional)
    void sayHi() {
        cout << "I am a shape.\n";
    }
};

class Circle : public Shape {
public:
    void area() override {
        cout << "Area of circle = πr^2\n";
    }
};

class Rectangle : public Shape {
public:
    void area() override {
        cout << "Area of rectangle = l * b\n";
    }
};

int main() {
    // Shape s; // ❌ Not allowed - abstract class

    Shape* s1 = new Circle();
    Shape* s2 = new Rectangle();

    s1->area();  // Output: Area of circle = πr^2
    s2->area();  // Output: Area of rectangle = l * b

    delete s1;
    delete s2;
}
💡 Why Use Abstract Classes?
Interface-like behavior: Define "what should be done" but not "how".

Promote polymorphism and extensibility.

Useful in large applications where multiple types follow a common interface.

🔁 Summary

Concept	Description
Pure Virtual Function	Declared with = 0; no body
Abstract Class	Has at least one pure virtual function
Cannot Instantiate	Objects of abstract classes
Enforces Interface	Derived class must override the function
